#include "../Header Files/OneToManyAggregation/3.4.h"
#include "../Header Files/StructureArrayFields/3.2.h"
#include "../Header Files/Agregation/3.3.h"
#include "../Header Files/Classes/3.5.h"
using namespace std;

void main()
{
	// TODO: подписывать только номер задания - создавать неудобство пользователю. +
	// Только с номером надо постоянно открывать методичку и читать, что в этом задании должно быть. 
	// Правильнее - вместе с номером описывать саму задачу в пользовательском интерфейсе,
	// чтобы не надо было подглядывать в методичку
	setlocale(LC_ALL, "ru");
	cout << "Задание 3.2.2 (Написать функцию DemoBook, внутри"
		<< "которой создать переменную типа Book и"
		<< "присвойте в её поля значения) :\n";
	DemoBook();

	cout << "\nЗадание 3.2.3 (Создать функцию"
		<< "ReadBookFromConsole(Book & book),"
		<< "которая выполняет чтение всех полей структуры"
		<< "книги с клавиатуры.):\n";
	DemoReadBookFromConsole();

	cout << "\nЗадание 3.2.4 (Создайте функцию "
		<< "WriteBookToConsole(Book & book),"
		<< "которая выводит данные книги на экран):\n";
	DemoWriteBook();

	cout << "\nЗадание 3.2.5 (Создайте функцию int FindBookByAuthor"
		<< "(Book * books, int booksCount, string author),"
		<< "которая принимает на вход массив книг по указателю"
		<< "и среди книг находит книгу с указанным автором author):\n";
	DemoFindBookByAuthor();

	cout << "\nЗадание 3.2.6 (По аналогии со структурой Book,"
		<< "создайте структуру Route, описывающую маршрут общественного"
		<< "транспорта.):\n";
	DemoRoute();

	cout << "\nЗадание 3.3.1, 3.3.2, 3.3.3, 3.3.4, 3.3.5\n"
		<< "(\n3.3.1 Создайте структуру точки Point в декартовых"
		<< "координатах (поля – вещественные координаты X и Y),"
		<< "функцию - конструктор и функции - сеттеры.\n"
		<< "\n3.3.2 Создайте структуру прямоугольника Rectangle,"
		<< "хранящего поля длины и ширины, а также поле типа Point,"
		<< "хранящее центр прямоугольника в пространстве."
		<< "Для структуры также создайте функцию - конструктор и"
		<< "функции - сеттеры с соответствующими проверками данных"
		<< "(длина и ширина не должны быть отрицательными).\n"
		<< "\n3.3.3 Создайте функцию DemoRectangleWithPoint(),"
		<< "в которой объявите массив из 5 прямоугольников"
		<< "Rectangle с произвольными значениями координат, длин и ширин.\n"
		<< "):\n";
	DemoRectangleWithPoint();

	cout << "\nЗадание 3.3.7, 3.3.8, 3.3.9, 3.3.10, 3.3.11\n"
		<< "(\n3.3.7 Создайте структуру времени Time,"
		<< "хранящую целочисленные поля Год, Месяц, День, Час, Минуты,"
		<< "функцию - конструктор и функции - сеттеры.\n"
		<< "\n3.3.8 Создайте структуру авиарейса Flight,"
		<< "хранящего поля номера рейса, пункта отправления, пункта"
		<< "назначения, времени отправления и времени"
		<< "прибытия(композиция структуры Time)\n."
		<< "\n3.3.9 Создайте функцию DemoFlightWithTime(), в которой"
		<< "объявите массив из 5 рейсов Flight с произвольными"
		<< "данными.Значения могут быть заданы программно.\n"
		<< "\n3.3.10 Допишите функцию DemoFlightWithTime()"
		<< "для вывода на экран информации о рейсах.\n"
		<< "\n3.3.11 Напишите функцию"
		<< "int GetFlightTimeMinutes(Flight& flight),"
		<< "которая принимает на вход объект авиарейса"
		<< "и возвращает время в полете в минутах(или в новом объекте Time).\n):\n";
	DemoFlightWithTime();

	cout << "\nЗадание 3.4.1, 3.4.2, 3.4.3, 3.4.4, 3.4.5, 3.4.6\n"
		<< "(\n 3.4.1 Создайте следующие типы данных:\n"
		<< "• Перечисление жанра песни Genre\n"
		<< "• Структуру песни Song с указанием названия песни,"
		<< "продолжительности, жанра"
		<< "\n• Структуру альбома Album с указанием названия,"
		<< "года выпуска и массива песен\n"
		<< "• Структуру музыкальной группы Band с указанием названия,"
		<< "текстового описания(история группы"
		<< "или её состав) и массива альбомов группы.\n"
		<< "\n3.4.2 Создайте функцию Song* FindSong(string songTitle),"
		<< "которая находит среди всех песен группы всех"
		<< "альбомов песню с заданным именем и возвращает"
		<< "указатель на эту песню.\n"
		<< "\n3.4.3 Создайте функцию Album* FindAlbum(Song* song),"
		<< "которая находит среди всех песен группы альбом с"
		<< "заданной песней."
		<< "\n3.4.4 Создайте функцию"
		<< "Song* GetAllSongs(Band* band, int& allSongsCount),"
		<< "принимающую на вход объект"
		<< "группы.Функция должна подсчитать количество всех песен"
		<< "во всех альбомах группы, затем создать"
		<< "динамический массив размерностью под общее количество"
		<< "всех песен и сохранить в этот новый массив все"
		<< "песни из всех альбомов."
		<< "\n3.4.5 Создайте функцию DemoBand(), в которой создайте объект"
		<< "структуры Band. Проинициализируйте группу"
		<< "программно, задав её три альбома по 4 - 5 песен в каждом"
		<< "альбоме.Продемонстрируйте работу функций"
		<< "FindSong(), FindAlbum() и GetAllSongs().\n"
		<< "\n3.4.6 На основе функции GetAllSongs(), создайте функцию"
		<< "Song * GetAllGenreSongs(Band * band, Genre"
		<< "findingGenre, int& allSongsCount), возвращающую массив"
		<< "всех песен группы в заданном жанре findingGenre."
		<< "Продемонстрируйте работу функции.:\n";
	DemoBand();

	cout << "\nЗадания 3.5.1-3.5.5\n"
		<< "\n3.5.1 Перепишите все ранее созданные структуры на классы:\n"
		<< "• Rectangle и Point\n"
		<< "• Flight и Time\n"
		<< "• Song, Album, Band\n"
		<< "\n3.5.2 Перенесите все функции-сеттеры внутрь новых классов."
		<< "Перемещение сеттеров внутрь классов"
		<< "приведет к необходимости исправления вызова сеттеров во всех"
		<< "ранее написанных функциях:\n"
		<< "• DemoRectangleWithPoint()\n"
		<< "• DemoFlightWithTime(), GetTimeFlightMinutes()\n"
		<< "• FindSong(), FindAlbum(), GetAllSongs(), GetAllGenreSongs(),"
		<< "DemoBand()"
		<< "\n3.5.3 Перенесите функции-конструкторы внутрь новых классов."
		<< "Это также приведет к необходимости"
		<< "исправления всех функций, в которых создаются объекты"
		<< "данных классов.\n"
		<< "\n3.5.4 Поместите метод GetFlightTimeMinutes() внутрь класса"
		<< "Flight. После переноса метода в класс ему уже не"
		<< "нужно будет принимать на вход объект авиарейса, так"
		<< "как он сможет обращаться к нему напрямую через"
		<< "указатель this.Исправьте функцию, и убедитесь, что"
		<< "она работает правильно.\n"
		<< "\n3.5.5 Поместите методы FindSong(), FindAlbum(),"
		<< "GetAllSongs(), GetAllGenreSongs() внутрь класса Band."
		<< "Исправьте функции таким образом, чтобы они работали"
		<< "с объектом Band через указатель this без передачи"
		<< "объекта в функцию в качестве входного аргумента.:\n";
	DemoBandClass();
}